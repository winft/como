<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!--
SPDX-FileCopyrightText: 2023 Roman Gilg <subdiff@gmail.com>

SPDX-License-Identifier: GPL-2.0-or-later
-->

<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
    <!--  Documentation for global Compositor Modules effect methods. In doxygen XML format as this can be converted to MediaWiki    -->
    <!--  Use script and XSLT from kde:scratch/graesslin/kwin-scripting-api-generator to generate the documentation    -->
    <!--  This xml is not meant to be doxygen complient    -->
    <compounddef>
        <compoundname>Global</compoundname>
        <briefdescription>Methods and properties added to the global JavaScript object.</briefdescription>
        <sectiondef kind="property">
            <memberdef kind="property" writable="no">
                <type>como::EffectsHandler</type>
                <definition></definition>
                <argsstring></argsstring>
                <name>effects</name>
                <read></read>
                <detaileddescription>Global property to the core wrapper of Como Effects</detaileddescription>
            </memberdef>
            <memberdef kind="property" writable="no">
                <type>como::ScriptedEffect</type>
                <definition></definition>
                <argsstring></argsstring>
                <name>effect</name>
                <read></read>
                <detaileddescription>Global property to the actual Effect</detaileddescription>
            </memberdef>
            <memberdef kind="property" writable="no">
                <type>object</type>
                <definition></definition>
                <argsstring></argsstring>
                <name>Effect</name>
                <read></read>
                <detaileddescription>Provides access to enums defined in como::AnimationEffect and como::ScriptedEffect</detaileddescription>
            </memberdef>
            <memberdef kind="property" writable="no">
                <type>object</type>
                <definition></definition>
                <argsstring></argsstring>
                <name>como</name>
                <read></read>
                <detaileddescription>Provides access to enums defined in como::WorkspaceWrapper</detaileddescription>
            </memberdef>
            <memberdef kind="property" writable="no">
                <type>object</type>
                <definition></definition>
                <argsstring></argsstring>
                <name>QEasingCurve</name>
                <read></read>
                <detaileddescription>Provides access to enums defined in QEasingCurve</detaileddescription>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-func">
            <memberdef kind="function">
                <type>Q_SCRIPTABLE QList&lt;quint64&gt;</type>
                <definition>QList&lt;quint64&gt; como::ScriptedEffect::animate</definition>
                <argsstring>(settings)</argsstring>
                <name>animate</name>
                <read></read>
                <detaileddescription>
Schedules one or many animations for one window. The animations are defined through the settings object providing
a more declarative way to specify the animations than the animate call on the effect object. The settings object
supports the following attributes:
&lt;syntaxhighlight lang="javascript"&gt;
{
    window: EffectWindow, /* the window to animate, required */
    duration: int, /* duration in msec, required */
    curve: QEasingCurve.Type, /* global easing curve, optional */
    type: Effect.Attribute, /* for first animation, optional */
    from: FPx2, /* for first animation, optional */
    to: FPx2, /* for first animation, optional */
    delay: int, /* for first animation, optional */
    shader: int, /* for first animation, optional */
    animations: [ /* additional animations, optional */
        {
        curve: QEasingCurve.Type, /* overrides global */
        type: Effect.Attribute,
        from: FPx2,
        to: FPx2,
        delay: int,
        shader: int
        }
    ]
}
&lt;/syntaxhighlight&gt;
At least one animation or attribute setter (see below) needs to be specified either with the top-level properties or in the animations list.
                </detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE QList&lt;quint64&gt;</type>
                <definition>QList&lt;quint64&gt; como::ScriptedEffect::set</definition>
                <argsstring>(settings)</argsstring>
                <name>set</name>
                <read></read>
                <detaileddescription>
Like animate, just that the manipulation does not implicitly end with the animation. You have to explicitly cancel it.
Until then, the manipulated attribute will remain at animation target value.
                </detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE bool</type>
                <definition>bool como::ScriptedEffect::cancel</definition>
                <argsstring>(QList&lt;quint64&gt;)</argsstring>
                <name>cancel</name>
                <read></read>
                <detaileddescription>
Cancel one or more present animations caused and returned by como::ScriptedEffect::animate or como::ScriptedEffect::set.
For convenience you can pass a single quint64 as well.
                </detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE void</type>
                <definition>void como::ScriptedEffect::print</definition>
                <argsstring>(QVariant ... values)</argsstring>
                <name>print</name>
                <read></read>
                <detaileddescription>Prints all provided values to kDebug and as a D-Bus signal</detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE int</type>
                <definition>int como::ScriptedEffect::animationTime</definition>
                <argsstring>(int duration)</argsstring>
                <name>animationTime</name>
                <read></read>
                <detaileddescription>Adjusts the passed in duration to the global animation time facator.</detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE int</type>
                <definition>int como::ScriptedEffect::displayWidth</definition>
                <argsstring>()</argsstring>
                <name>displayWidth</name>
                <read></read>
                <detaileddescription>Width of the complete display (all screens).</detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE int</type>
                <definition>int como::ScriptedEffect::displayHeight</definition>
                <argsstring>()</argsstring>
                <name>displayHeight</name>
                <read></read>
                <detaileddescription>Height of the complete display (all screens).</detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE bool</type>
                <definition>bool como::ScriptedEffect::registerScreenEdge</definition>
                <argsstring>(ElectricBorder border, QScriptValue callback)</argsstring>
                <name>registerScreenEdge</name>
                <read></read>
                <detaileddescription>Registers the callback for the screen edge. When the mouse gets pushed against the given edge the callback will be invoked.</detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE bool</type>
                <definition>bool como::ScriptedEffect::registerShortcut</definition>
                <argsstring>(QString title, QString text, QString keySequence, QScriptValue callback)</argsstring>
                <name>registerShortcut</name>
                <read></read>
                <detaileddescription>Registers keySequence as a global shortcut. When the shortcut is invoked the callback will be called. Title and text are used to name the shortcut and make it available to the global shortcut configuration module.</detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE uint</type>
                <definition>uint como::ScriptedEffect::addFragmentShader</definition>
                <argsstring>(ShaderTrait traits, QString fragmentShaderFile)</argsstring>
                <name>addFragmentShader</name>
                <read></read>
                <detaileddescription>Creates a shader and returns an identifier which can be used in animate or set. The shader sources must be provided in the shaders sub-directory of the contents package directory. The fragment shader needs to have the file extension frag. Each shader should be provided in a GLSL 1.10 and GLSL 1.40 variant. The 1.40 variant needs to have a suffix _core. E.g. there should be a shader myCustomShader.frag and myCustomShader_core.frag. The vertex shader is generated from the ShaderTrait. The ShaderTrait enum can be used as flags in this method.</detaileddescription>
            </memberdef>
            <memberdef kind="function">
                <type>Q_SCRIPTABLE uint</type>
                <definition>void como::ScriptedEffect::setUniform</definition>
                <argsstring>(uint shaderId, QString name, QJSValue value)</argsstring>
                <name>setUniform</name>
                <read></read>
                <detaileddescription>Updates the uniform value of the uniform identified by @p name for the shader identified by @p shaderId. The @p value can be a floating point numeric value (integer uniform values are not supported), an array with either 2, 3 or 4 numeric values, a string to identify a color or a variant value to identify a color as returned by readConfig. This method can be used to update the state of the shader when the configuration of the effect changed.</detaileddescription>
            </memberdef>
        </sectiondef>
    </compounddef>
    <compounddef>
        <compoundname>como::FPx2</compoundname>
        <briefdescription>This class is used to describe the animation end points, that is from which FPx2 values to which FPx2 values an animation goes. This class contains two properties to describe two animation components individually (e.g. width and height). But it's also possible to just have one value (e.g. opacity). In this case the definition of an FPx2 can be replaced by a single value.</briefdescription>
        <sectiondef kind="property">
            <memberdef kind="property" writable="yes">
                <type>qreal</type>
                <definition></definition>
                <argsstring></argsstring>
                <name>value1</name>
                <read></read>
                <detaileddescription></detaileddescription>
            </memberdef>
            <memberdef kind="property" writable="yes">
                <type>qreal</type>
                <definition></definition>
                <argsstring></argsstring>
                <name>value2</name>
                <read></read>
                <detaileddescription></detaileddescription>
            </memberdef>
        </sectiondef>
    </compounddef>
</doxygen>
